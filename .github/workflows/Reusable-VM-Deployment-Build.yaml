name: Reusable VM Deployment Build
on: 
 workflow_call:
  inputs:
      build_env:
        required: true
        type: string
        default: qa
      tf_action:
        required: true
        type: string
        default: plan
      run_bash:
        required: true
        type: string
        default: false
      
env:
 ARM_USE_OIDC: true
 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
 WORKING_DIR: ./
 TF_VERSION: 1.3.0
 

jobs:
 build:
    name: 'Terraform Build'
    environment: ${{inputs.build_env}} # Environment to specify which secret to use and env to deploy to
    runs-on: ubuntu-latest
    env:
      TF_VAR_AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_MGMT_SUBSCRIPTION_ID: ${{ secrets.MGMT_SUBSCRIPTION_ID }}

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true   
      
      - name: Set Environment Variables
        id: envvars
        shell: bash
        run: |
          echo "Ensuring Environment Variables are set:"
          export "arm_client_id:${{ env.AZURE_CLIENT_ID }}"
          export "arm_client_secret:${{ env.AZURE_CLIENT_SECRET }}"
          echo "$arm_client_id"
          echo "$arm_client_secret"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run Bash Script
        shell: bash
        if: inputs.run_bash == 'true'
        run:  | 
          echo "$arm_client_secret"
          bash ./terraform-azurerm-vnet-shared/bootstrap.sh


      # - name: Terraform Init
      #   id: init
      #   working-directory: ${{ env.WORKING_DIR }}
      #   run: terraform init -backend-config=./backends/${{ inputs.build_env }}.conf

      # - name: Terraform Plan Apply
      #   id: plan_apply
      #   working-directory: ${{ env.WORKING_DIR }}
      #   if: inputs.tf_action == 'apply' || inputs.tf_action == 'plan'
      #   run: terraform plan -var-file=./environments/${{ inputs.build_env }}.tfvars -var client_id=${{ vars.AZURE_CLIENT_ID }} -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.AZURE_TENANT_ID }} -var client_secret=${{ secrets.AZURE_CLIENT_SECRET }}

      # - name: Terraform Apply
      #   id: apply
      #   working-directory: ${{ env.WORKING_DIR }}
      #   if: inputs.tf_action == 'apply'
      #   run: terraform apply -var-file=./environments/${{ inputs.build_env }}.tfvars -var client_id=${{ vars.AZURE_CLIENT_ID }} -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.AZURE_TENANT_ID }} -var client_secret=${{ secrets.AZURE_CLIENT_SECRET }} -auto-approve

      # - name: Terraform Plan Destroy
      #   id: plan_destroy
      #   working-directory: ${{ env.WORKING_DIR }}
      #   if: inputs.tf_action == 'destroy'
      #   run: terraform plan -destroy -var-file=./environments/${{ inputs.build_env }}.tfvars -var client_id=${{ vars.AZURE_CLIENT_ID }} -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.AZURE_TENANT_ID }} -var client_secret=${{ secrets.AZURE_CLIENT_SECRET }}

      # - name: Terraform Destroy
      #   id: destroy
      #   working-directory: ${{ env.WORKING_DIR }}
      #   if: inputs.tf_action == 'destroy'
      #   run: terraform destroy -var-file=./environments/${{ inputs.build_env }}.tfvars -var client_id=${{ vars.AZURE_CLIENT_ID }} -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.AZURE_TENANT_ID }} -var client_secret=${{ secrets.AZURE_CLIENT_SECRET }} -auto-approve
