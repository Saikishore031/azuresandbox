name: Reusable VM Deployment Build
on: 
 workflow_call:
  inputs:
      build_env:
        required: true
        type: string
      tf_action:
        required: true
        type: string
        default: apply
      
env:
 ARM_USE_OIDC: true
 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
 WORKING_DIR: ./
 TF_VERSION: 1.3.0
 

jobs:
 build:
    name: 'Terraform Build'
    environment: ${{inputs.build_env}} # Environment to specify which secret to use and env to deploy to
    runs-on: windows-latest
    env:
      TF_VAR_AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_MGMT_SUBSCRIPTION_ID: ${{ secrets.MGMT_SUBSCRIPTION_ID }}

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Install Powershell
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          install-module az -Allowclobber


      - name: Checkout Repository
        uses: actions/checkout@v3

#       - name: Terraform Format
#         id: fmt
#         working-directory: ${{ env.WORKING_DIR }}
#         run: terraform fmt -recursive -check

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init -backend-config=./backends/${{ inputs.build_env }}.conf

      - name: Terraform Plan Apply
        id: plan_apply
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.tf_action == 'apply' || inputs.tf_action == 'plan'
        run: terraform plan -var-file=./environments/${{ inputs.build_env }}.tfvars -var client_id=${{ secrets.AZURE_CLIENT_ID }} -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.AZURE_TENANT_ID }} -var client_secret=${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.tf_action == 'apply'
        run: terraform apply -var-file=./environments/${{ inputs.build_env }}.tfvars -var client_id=${{ secrets.AZURE_CLIENT_ID }} -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.AZURE_TENANT_ID }} -var client_secret=${{ secrets.AZURE_CLIENT_SECRET }} -auto-approve

      - name: Terraform Plan Destroy
        id: plan_destroy
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.tf_action == 'destroy'
        run: terraform plan -destroy -var-file=./environments/${{ inputs.build_env }}.tfvars -var client_id=${{ secrets.AZURE_CLIENT_ID }} -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.AZURE_TENANT_ID }} -var client_secret=${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.tf_action == 'destroy'
        run: terraform destroy -var-file=./environments/${{ inputs.build_env }}.tfvars -var client_id=${{ secrets.AZURE_CLIENT_ID }} -var subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.AZURE_TENANT_ID }} -var client_secret=${{ secrets.AZURE_CLIENT_SECRET }} -auto-approve
